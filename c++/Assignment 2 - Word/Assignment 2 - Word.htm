<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0072)http://www.cs.sfu.ca/~mori/courses/cmpt225/assignments/assignment-2.html -->
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">

<link rel="stylesheet" href="http://www.cs.sfu.ca/~mori/mori_pages.css">
<link rel="stylesheet" href="http://www.cs.sfu.ca/~mori/courses/cmpt225/assignments/lab_style.css">




  
    

    <title>
        Assignment 2 - Word
    </title>

    
    
    
            
            
<style type="text/css"></style></head><body><h1>CMPT 225 Assignment 2</h1>

<hr>    
        
<div class="plain">
            

<p>Start by downloading the <a href="http://www.cs.sfu.ca/~mori/courses/cmpt225/assignments/a2-files.zip">assignment files</a>.  This
zipfile contains a makefile, a test script and inputs/ground truths,
and stubs for all of the .cpp files you need.  <b>Please do not
create any additional .h and .cpp files.</b>


</p><hr>

<h2>Part 1 - Words</h2>

<p>Consider the function shown below. The function returns true if the letters in
the word are in alphabetical order, false otherwise.</p>

<pre>bool alpha(string s){
	int ln = s.size();
	for (int i = 0; i &lt; ln - 1; ++i){
		if (s[i] &gt; s[i+1]){
			return false;
		}
	}
	return true;
}
</pre>


  <h3>Your task</h3>
  
<p>Consider the character comparison as the barometer instruction
  (s[i] &gt; s[i+1]).  Implement this function in C++
  in the file <i>words.cpp</i>.  The <i>makefile</i> contains a
  definition for <i>words</i>.  You can build the executable <i>words</i> for
  this part of the assignment by running "make words".  ("make" or
  "make all" will build both <i>words</i> and the executable for the
  second part of the assignment.)

  </p><p>Determine the following for English words, using the provided
  list in file <i>wordlist</i> (do not convert to lowercase).
  
</p><ol>
<li>The average length of a word</li>
<li>The average number of character comparisons performed by <i>alpha</i></li>
<li>The average number of character comparisons as a function of <i>n</i></li>
<li>The <i>O</i> notation average case running time of <i>alpha</i></li>

<li>The <i>O</i> notation best case running time of <i>alpha</i>.  Give an example input for
when this case occurs.</li>
<li>The <i>O</i> notation worst case the running time of <i>alpha</i>.  Give an example input for
when this case occurs.</li>
</ol>

<p>Note <i>words.cpp</i> contains code for reading <i>wordlist</i>.</p>

<ul>
  <li>Edit the file word_answers.txt to contain your answers to 1., 2., 
4., 5., and 6. above.
  </li><li>The code in <i>words.cpp</i> writes your answer to 3. into a file
  <i>average_comps.txt</i>.  Use the provided script <i>comps.p</i> to plot this
  using gnuplot.  Running <i>gnuplot comps.p</i> will produce an image file
  <i>average_comps.png</i> with a plot in it.
  <pre>uname@hostname: ~$ ls average_comps.txt
average_comps.txt
uname@hostname: ~$ gnuplot comps.p
uname@hostname: ~$ ls average_comps.png
average_comps.png
 </pre>
</li></ul>

Submit word_answers.txt and the gnuplot output average_comps.png.



<hr>

<h2>Part 2 - Mode</h2>

Write a C++ function that obtains the mode of a set of integers stored
in an array.  Recall that the mode of a set is the most frequently
occurring element.

<p>Please use the provided file mode.cpp, and fill in the function
mode.  Note: you must write any auxialliary functions you use, and may
not include any external libraries to help (other than iostream and fstream).  The
<i>makefile</i> contains a definition for <i>mode</i>.  You can build
the executable <i>mode</i> for this part of the assignment by running
"make mode".

</p><h3>Testing</h3>

<p>The zipfile contains a testing script, test.py.  You should run
this, and other test cases, to verify correctness of your mode function.


</p><hr>

<h2>Grading</h2>

The assignment is worth 3% and marks are allocated to the assignment as follows:

<ul>
<li>Part 1 1%</li>
<li>Part 2 1%</li>
<li>Coding style (memory management, choice of algorithms, use of functions and loops, code indentation
and spacing, comments, and variable naming) 1%</li>
</ul>

<hr>


<h2>Submission</h2>

<p>You should submit your assignment online to the <span class="link-https"><a href="http://courses.cs.sfu.ca/">CourSys submission server</a></span>. You should submit the following:</p>

<ul>
  <li>Modified <i>words.cpp</i>
  </li><li>Modified <i>word_answers.txt</i>
  </li><li>Plot of number of comparisons as a function of n <i>average_comps.png</i>
  </li><li>Modified <i>mode.cpp</i>
</li></ul>

<p>Please read the documentation on the submission site for further
information. The assignment is due at 11:59pm on March 1.


</p></div>






    


<p>
  

</p><hr>
  <a href="http://www.cs.sfu.ca/~mori/courses/cmpt225">Back to the CMPT 225 homepage.</a>



</body></html>